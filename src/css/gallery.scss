@use "sass:map";
@use "variables";
@use "mixins";

html[gallery-is-visible] > div:not(.rootGallery, script, noscript, style) {
  pointer-events: none;
  user-select: none;
}

html > body > .rootGallery {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100vh;
  max-height: 100vh;
  max-width: 100vw;
  z-index: 1000;
  background-color: map.get(variables.$gallery, "color-background-overlay");

  > div {
    &.galleryBar {
      height: calc(map.get(variables.$gallery, "height-top-bar") - 2px);
      max-height: calc(map.get(variables.$gallery, "height-top-bar") - 2px);
      min-height: calc(map.get(variables.$gallery, "height-top-bar") - 2px);
      background-color: map.get(variables.$gallery, "color-background-top-bar");
      border-bottom: 2px solid map.get(variables.$gallery, "color-border");
      width: 100%;
      display: table;
      color: map.get(variables.$gallery, "color-top-bar");
      backdrop-filter: blur(map.get(variables.$gallery, "blur-intensity"));

      > div {
        display: table-cell;
        vertical-align: middle;
      }

      > .galleryBarRight {
        padding-right: 10px;
        text-align: right;
        white-space: nowrap;
        width: 1%;

        > span[data-action],
        > a {
          user-select: none;
        }

        > span[data-action] {
          margin: 0 2px;
        }

        > span[data-action="toggle"] > span {
          width: 13px;
          text-align: center;
          display: inline-block;
        }

        > a.download {
          color: map.get(variables.$gallery, "color-a-download");
          text-decoration: none;

          &:hover {
            color: map.get(variables.$gallery, "color-a-download-hover");
            text-decoration: underline;
          }
        }

        > *:not(:last-child) {
          margin-right: 3px;
        }

        > a.download,
        > span[data-action] {
          cursor: pointer;
        }

        > a.download::before,
        > span[data-action]::before {
          content: "[";
        }

        > a.download::after,
        > span[data-action]::after {
          content: "]";
        }
      }

      > div.galleryBarLeft {
        @include mixins.fonting(
          $key: "gallery",
          $spacing: 1px
        );

        padding: 0 10px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 0;

        @include mixins.media-query("screen", "isMobile") {
          font-size: 11px;
        }

        > span {
          &:nth-child(1) {
            font-feature-settings: "tnum";
          }

          &:first-child::after,
          &:last-child::before {
            content: "|";
            margin: 0 7px;
            color: #1c1c1c;
          }
        }

        > a {
          color: map.get(variables.$gallery, "color-top-bar");
          text-decoration: none;

          &:hover {
            text-decoration: underline;
          }
        }
      }
    }

    &.galleryContent {
      display: table;
      width: 100vw;
      height: calc(100vh - map.get(variables.$gallery, "height-top-bar"));

      > div.list > div.drag {
        content: " ";
        width: 5px;
        min-height: 100%;
        cursor: w-resize;
        position: sticky;
        top: 0;
        bottom: 0;
        border-left: 2px solid rgb(28 28 28 / 87%);
        z-index: 1;
      }

      &.reversed > div.list > div.drag {
        left: unset;
        right: 0;
        top: 0;
        bottom: 0;
        float: right;
        border-left: none;
        border-right: 2px solid map.get(variables.$gallery, "color-border");
      }

      &.reversed > div.media > div.spinner {
        top: 10px;
      }

      &:not(.reversed) > div.media > div.spinner {
        top: 35px;
      }

      > div.list > table {
        width: 100%;
        max-width: 100%;
        position: absolute;
        top: 0;
        bottom: 0;
      }

      &.reversed > div.list > table > tbody > tr.selected > td {
        $width-list-selected-border: map.get(variables.$gallery, "width-list-selected-border");
        $color-list-selected-border: map.get(variables.$gallery, "color-list-selected-border");

        border-left: none;
        border-right: $width-list-selected-border solid $color-list-selected-border;
        background-color: map.get(variables.$gallery, "color-background-list-selected");
      }

      > div.list > table > tbody > tr:not(.selected) > td:hover {
        background-color: map.get(variables.$gallery, "color-background-list-item-hover");
        color: map.get(variables.$gallery, "color-list-item-hover");
      }

      > div.screenNavigate {
        display: none;

        > span {
          pointer-events: none;
        }
      }

      > div.media {
        display: table-cell;
        text-align: center;
        width: 100%;
        vertical-align: middle;
        position: relative;
        user-select: none;
        backdrop-filter: blur(map.get(variables.$gallery, "blur-intensity"));

        > div.item-info-static {
          position: absolute;
          right: 5px;
          top: 5px;
          padding: 1px 5px 2px;
          background-color: rgb(0 0 0 / 50%);
          border-radius: 2px;
          pointer-events: none;
          font-feature-settings: "tnum";
          opacity: 1;
          transition: opacity 0.5s;
          transition: opacity 0.5s ease-in-out;
          transition: opacity 0.5s ease-in-out;
        }

        > div.wrapper > div.cover {
          > div.reverse {
            position: absolute;
            top: 4px;
            left: 4px;
            border-radius: 2px;
            font-size: 11px;
            pointer-events: none;
            opacity: 0.5;
            overflow: hidden;
            visibility: hidden;
            transition: opacity 0.1s;
            transition: opacity 0.1s ease-in-out;
            transition: opacity 0.1s ease-in-out;

            &:hover {
              opacity: 0.85;
            }
          }

          &:hover > div.reverse {
            visibility: visible;
          }

          > .reverse > a {
            display: inline-block;
            text-decoration: none;
            pointer-events: auto;
            padding: 3px 6px 4px;
            color: #e5e5e5;
            background-color: #151515;
            transition: background-color 0.2s;
            transition: background-color 0.2s ease-in-out;
            transition: background-color 0.2s ease-in-out;

            &:not(:last-child) {
              border-right: 1px solid #1a1a1a;
            }

            &:hover {
              background-color: rgb(0 0 0 / 97.5%);
              color: #fff;
            }
          }
        }

        > div.spinner {
          $spinner-size: 26px;
          $spinner-fade-duration: 0.25s;

          position: absolute;
          z-index: 1;
          right: 10px;

          /* By Sam Herbert (@sherb), for everyone. More @ http://goo.gl/7AJzbL */
          background: url('data:image/svg+xml;utf8,<svg width="38" height="38" viewBox="0 0 38 38" xmlns="http://www.w3.org/2000/svg"><defs><linearGradient x1="8.042%" y1="0%" x2="65.682%" y2="23.865%" id="a"><stop stop-color="%23fff" stop-opacity="0" offset="0%"/><stop stop-color="%23fff" stop-opacity=".631" offset="63.146%"/><stop stop-color="%23fff" offset="100%"/></linearGradient></defs><g fill="none" fill-rule="evenodd"><g transform="translate(1 1)"><path d="M36 18c0-9.94-8.06-18-18-18" id="Oval-2" stroke="url(%23a)" stroke-width="2"><animateTransform attributeName="transform" type="rotate" from="0 18 18" to="360 18 18" dur="0.9s" repeatCount="indefinite" /></path><circle fill="%23fff" cx="36" cy="18" r="1"><animateTransform attributeName="transform" type="rotate" from="0 18 18" to="360 18 18" dur="0.9s" repeatCount="indefinite" /></circle></g></g></svg>');
          background-size: $spinner-size $spinner-size;
          width: $spinner-size;
          height: $spinner-size;
          transition: opacity $spinner-fade-duration;
          transition: opacity $spinner-fade-duration ease-in-out;
          transition: opacity $spinner-fade-duration ease-in-out;
          opacity: 0;
        }

        > div.loader {
          position: absolute;
          top: 10px;
          right: 10px;
          background-color: #000000a1;
          padding: 7px 9px;
          border-radius: 2px;
        }
      }

      &.reversed > .media > .spinner {
        right: unset;
        left: 10px;
      }

      max-height: calc(100vh - map.get(variables.$gallery, "height-top-bar") - 2px);

      > .media > .wrapper {
        display: flex;
        flex-flow: column wrap;
        align-items: center;
        justify-content: center;

        div.error {
          color: #d83232;
          display: block;
          width: 100%;
        }

        > .cover,
        > .cover > img,
        > .cover > video {
          max-height: calc(100vh - map.get(variables.$gallery, "height-top-bar") - 2px);
        }

        max-height: calc(100vh - map.get(variables.$gallery, "height-top-bar") - 2px);

        > .cover {
          position: relative;
        }

        &.fill {
          height: calc(100vh - map.get(variables.$gallery, "height-top-bar") - 2px);

          > .cover {
            height: 100%;
          }

          > img,
          > video {
            object-fit: contain;
            height: 100%;
            overflow: hidden;
          }

          > img {
            width: 100%;
          }

          > video {
            width: auto;
          }
        }

        > .cover > img {
          object-fit: contain;
          max-width: 100%;
          display: none;
        }

        > .cover > img[sharpened] {
          transform: translateZ(0);
          transform: translateZ(0);
          image-rendering: optimizequality;
        }

        > video {
          object-fit: contain;
          max-width: 100%;
          display: none;
          outline: none;
          border: none;
        }
      }

      > div.list {
        display: table-cell;
        background-color: #101013;
        max-width: 50vw;
        min-width: 275px;
        width: 25vw;
        float: right;
        overflow-y: scroll;
        overflow-x: hidden;
        border-top: 1px solid #101010b8;
        position: relative;
        scrollbar-color: #222 #131315;
        height: calc(100vh - map.get(variables.$gallery, "height-top-bar") - 2px);
        max-height: calc(100vh - map.get(variables.$gallery, "height-top-bar") - 2px);

        > table > tbody > tr {
          @include mixins.fonting(
            $key: "gallery",
            $align: false,
            $spacing: 1px,
            $color-scope: variables.$gallery,
            $color-key: "color-list-item"
          );

          > td {
            padding: 6px 4px 6px 6px;
            cursor: pointer;
            max-width: 0;
            overflow: hidden;
            white-space: nowrap;
            text-overflow: ellipsis;
            border-left: 3px solid transparent;
            user-select: none;
          }

          &.selected > td {
            border-left:
              map.get(variables.$gallery, "width-list-selected-border")
              solid
              map.get(variables.$gallery, "color-list-selected-border");
            background-color: map.get(variables.$gallery, "color-background-list-selected");
            color: map.get(variables.$gallery, "color-list-item-selected");

            &:hover {
              background-color: map.get(variables.$gallery, "color-background-list-selected-hover");
            }
          }

          @include mixins.media-query("screen", "isMobile") {
            font-size: 11px;
          }
        }
      }
    }

    &.galleryBar > div.galleryBarRight {
      > a.download,
      > span[data-action] {
        @include mixins.fonting(
          $key: "gallery",
          $spacing: 1px,
        );

        @include mixins.media-query("screen", "isMobile") {
          font-size: 11px;
        }
      }
    }
  }
}
